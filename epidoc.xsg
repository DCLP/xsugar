NL = [\r\n]+
SP = [ ]
ABBR = "( )"

BEGOPT = "<:"
ENDOPT = ":>"
BEGNUM = "<#"
ENDNUM = "#>"
BEGSEG = "<\&"
ENDSEG = "\&>"

UNDERDOT = "\u0323"
//ca. with 0 or more spaces followed by ? mark
CAUNKNOWN = "ca."[ ]*"\?"
LEADCA = "ca."[ ]*

// WORD breaks at space and WORDS allows space (therefore multiple words)
WORD = ([^ \/\\\n\r\t\[\]<>_#@~〚〛\*\&\,\:\=\|\'\!\(\)\{\}\?\"¨΄`῾᾿῀]+) (MAX)
WORDS = ([^\/\\\n\r\t\[\]<>_#@~〚〛\*\&\,\:\=\|\'\!\(\)\{\}\?\"¨΄`῾᾿῀]+) (MAX)
WORDOPT = ([^ \/\\\n\r\t\[\]<>_#@~〚〛\*\&\,\:\=\|\'\!\(\)\{\}\?\"¨΄`῾᾿῀]*) (MAX)
NUM = [0-9]+
ANYLETTER = [^\/\\\n\r\t\[\]<>_#@~〚〛\*\&\:\=\|\'\!\(\)\{\}\?\"¨΄`῾᾿῀]

DOT = "."
QUESTION = [\?]?

// symbolnum is for recognizing either a fraction or whole number with multiple digits
SYMBOLNUM = [0-9]+\/{1}[0-9]+|[0-9]+
// symnummulti is for recognizing multiple fractions or whole numbers with multiple digits divided by 1 or more spaces
SYMNUMMULTI = ([ ]*[0-9]+\/{1}[0-9]+[ ]+|[ ]*[0-9]+[ ]+)+
// appnum is for recognizing app_lem number
APPNUM = [0-9]+\.{1}[0-9]+

HANDSHIFT = m{1}[0-9]+

LANGLIST = ((Demotic)|(Coptic)|(Arabic)|(Nabatean)|(Aramaic))

Relost = "reason=lost"
Certlow = "cert=low"

file : [lines l] = <ab> [lines l]</>

// save  lines : [line n] [lines more] = [line n] [lines more] 
lines : [line n] [NL] [lines more] = [line n] [lines more] 
        >: [line q] = [line q]  
        : =

line  //: [linenumber x] [items m] [NL] = [linenumber x] [items m]
       : [linenumber x] [items m] = [linenumber x] [items m]
       //: [linenumber x] [items m] [NL] = [linenumber x] [items m] "\u000A"

     
	  
linenumber : [NUM n] "." " " = <lb n=[NUM n] />

items 
 	: [item i] [items more] = [item i] [items more]  
	>: [item p] = [item p]	


unclears_SP_non_terminal : [SP] [UNDERDOT] [unclears_SP_non_terminal mu] = "\u00A0" [unclears_SP_non_terminal mu]
								 >: [SP] [UNDERDOT] = "\u00A0"

unclears_non_terminal : [ANYLETTER a] [UNDERDOT] [unclears_non_terminal mu] = [ANYLETTER a] [unclears_non_terminal mu]
								 >: [ANYLETTER a] [UNDERDOT] = [ANYLETTER a]
		 
morenum : [BEGNUM] [WORD w] "=" [SYMBOLNUM x] [ENDNUM] [morenum y] = <num value=[SYMBOLNUM x]>[WORD w]</>  [morenum y]
			   >: [BEGNUM] [WORD w] "=" [SYMBOLNUM x] [ENDNUM] = <num value=[SYMBOLNUM x]>[WORD w]</>
		 

item 
	//---test unclear characters = underdots
	: [unclears_SP_non_terminal u] = <unclear reason="undefined">[unclears_SP_non_terminal u]</>
	>: [unclears_non_terminal u] = <unclear reason="undefined">[unclears_non_terminal u]</>
	
	//---choice---
	//  <:a|orth|b|:> 
	: [BEGOPT] [WORD a] "?" "|orth|" [WORD b] [ENDOPT] = <choice><corr cert="low">[WORD a]</><sic>[WORD b]</></>
	: [BEGOPT] [WORD a] "|orth|" [WORD b] [ENDOPT] = <choice><corr>[WORD a]</><sic>[WORD b]</></>
	>: [BEGOPT] [items a] "|orth|" [WORD b] [ENDOPT] = <choice><corr>[items a]</><sic>[WORD b]</></>
	>: [BEGOPT] [WORD a] "|orth|" [items b] [ENDOPT] = <choice><corr>[WORD a]</><sic>[items b]</></>
	>: [BEGOPT] [items a] "|orth|" [items b] [ENDOPT] = <choice><corr>[items a]</><sic>[items b]</></>

	//---milestone---
	//  '----' or  '--------'
	: "--------" = <milestone rend="horizontal-rule" unit="undefined"></>
	: "----" = <milestone rend="paragraphos" unit="undefined"></>

	//---test_uncertain_diacritical_diaeresis---
	// (¨)
	: [ANYLETTER a] "(¨)" = <hi rend="diaeresis">[ANYLETTER a]</>
	
	//---test_uncertain_diacritical_varia---
	// (`)
	: [ANYLETTER a] "(`)" = <hi rend="varia">[ANYLETTER a]</>	
	
	//---test_uncertain_diacritical_dasia---
    // (῾)
	: [ANYLETTER a] "(῾)" = <hi rend="dasia">[ANYLETTER a]</>
			
	//---test_uncertain_diacritical_psili---
	// (᾿)
	: [ANYLETTER a] "(᾿)" = <hi rend="psili">[ANYLETTER a]</>
	
	//---test_uncertain_diacritical_oxia---
	// (΄)
	: [ANYLETTER a] "(΄)" = <hi rend="oxia">[ANYLETTER a]</>
	
	//---test_uncertain_diacritical_perispomeni---
	// (῀)
	: [ANYLETTER a] "(῀)" = <hi rend="perispomeni">[ANYLETTER a]</>
	
	//---test_illegible_dot_gap---
	// .1, .2, .3
	: [DOT] [NUM n] = <gap reason="illegible" extent=[NUM n] unit="character"></>  
	
	//---test_illegible_dot_max---
	// .#{n}-#{n}
	: [DOT] [NUM v] "-" [NUM w] = <gap reason="illegible" extent=[NUM v] extentmax=[NUM w] unit="character"></>
	
	//---test_illegible_dot_lin---
	// .1lin, .2lin, .3lin
	: [DOT] [NUM n] "lin" = <gap unit="line" extent=[NUM n] reason="illegible"></>  
	
	//---test_illegible_gap_ca---
	// ca.1, ca.2, ca.3
	: [LEADCA] [NUM j] = <gap reason="illegible" extent=[NUM j] unit="character" precision="circa"></>
	
	//---test_lang_gap---
	//(Lang: Demotic 2 lines)
	: "(Lang: " [LANGLIST l] " " [NUM v] " lines)" = <gap reason="ellipsis" desc=[LANGLIST l] extent=[NUM v] unit="line"></>
	
	//---test_lines_not_transcribed---
	//"lines not transcribed"
	: "\"" [NUM v] " lines not transcribed\"" = <gap reason="ellipsis" extent=[NUM v] unit="line"></>
	
	//---perpendicular_lines---
	//(23, perp)
	: "(" [NUM v] ", perp)" = <lb rend="perpendicular" n=[NUM v]/>
	
	//---inverse_lines---
	//(23, inv)
	: "(" [NUM v] ", inv)" = <lb rend="inverse" n=[NUM v]/>
	
	//---subscript---
	//   /abc\
	: "\/" [WORD a] "\\" = <hi rend="subscript">[WORD a]</>
	
	//---superscript---?????? commented out for supralinear
	//   \abc/
    //: "\\" [WORD a] "\/" = <hi rend="superscript">[WORD a]</>
	
	//---add_place_supralinear---
	//   \abc/
    : "\\" [WORDS a] "\/" = <add place="supralinear">[WORDS a]</>
	: "\\" [WORDS a] "?" "\/" = <add place="supralinear" cert="low">[WORDS a]</>
	>: "\\" [items a] "\/" = <add place="supralinear">[items a]</>
	
	//---supraline_underline---
	//   \abc/
    : "\|\|" [WORD a] "\|\|" = <hi rend="supraline-underline">[WORD a]</>
	
	//---undefined_parallel---
	//  _abc_  - underlines
    : "_" [WORDS a] "_" = <supplied reason="undefined" evidence="parallel">[WORDS a]</>
	: "_" [WORDS a] "?" "_" = <supplied reason="undefined" evidence="parallel" cert="low">[WORDS a]</>
		
	//---lost_parallel---
	//  _[abc]_  - underlines
    : "_[" [WORD a] "]_" = <supplied reason="lost" evidence="parallel">[WORD a]</>
	
	//---number or fraction_no_symbol---
	//  #a#1/2# a = character representation and then the fraction it equals between next #'s
    : "<#=" [SYMBOLNUM s] [ENDNUM] = <num value=[SYMBOLNUM s]/>
	: "<#=" [SYMNUMMULTI m] "#>" = <num value=[SYMNUMMULTI m]/>
	: [BEGNUM] [WORD o] "=#>" = <num>[WORD o]</>
	
	//---fraction_number and whole_number symbol and multi_symbol---
	//  <#a#1/2#> a = symbol representation and then the number/fraction it equals after '='
    : [BEGNUM] [WORD o] "=" [SYMBOLNUM s] [ENDNUM] = <num value=[SYMBOLNUM s]>[WORD o]</>
	: [BEGNUM] [WORD o] [morenum m] "=" [SYMBOLNUM s] [ENDNUM] = <num value=[SYMBOLNUM s]>[WORD o] [morenum m]</>
	>: [BEGNUM] [items o] "=" [SYMBOLNUM s] [ENDNUM] = <num value=[SYMBOLNUM s]>[items o]</>
		
	//---choice---
	//  <:a|orth|b|:> 
	//: [BEGOPT] [WORD a] "|orth|" [WORD b] [ENDOPT] = <choice><corr>[WORD a]</><sic>[WORD b]</></>
	
	//---subst---
	//  <:a|subst|b|:> 
	: [BEGOPT] [WORD a] "|subst|" [WORD b] "?" [ENDOPT] = <subst><add place="inline">[WORD a]</><del rend="corrected" cert="low">[WORD b]</></>
	: [BEGOPT] [WORD a] "|subst|" [WORD b] [ENDOPT] = <subst><add place="inline">[WORD a]</><del rend="corrected">[WORD b]</></>
	>: [BEGOPT] [items a] "|subst|" [WORD b] [ENDOPT] = <subst><add place="inline">[items a]</><del rend="corrected">[WORD b]</></>
	>: [BEGOPT] [WORD a] "|subst|" [items b] [ENDOPT] = <subst><add place="inline">[WORD a]</><del rend="corrected">[items b]</></>
	>: [BEGOPT] [items a] "|subst|" [items b] [ENDOPT] = <subst><add place="inline">[items a]</><del rend="corrected">[items b]</></>
	
	//---app_lem---
	//  <|abc|def|> 
	: [BEGOPT] [WORD a] "|BL:" [APPNUM c] "|" [WORD b] [QUESTION q] [ENDOPT] = <app type="BL"><lem resp=[APPNUM c]>[WORD a]</><rdg>[WORD b][QUESTION q]</></>
	>: [BEGOPT] [items a] "|BL:" [APPNUM c] "|" [WORD b] [ENDOPT] = <app type="BL"><lem resp=[APPNUM c]>[items a]</><rdg>[WORD b]</></>
	>: [BEGOPT] [WORD a] "|BL:" [APPNUM c] "|" [items b] [ENDOPT] = <app type="BL"><lem resp=[APPNUM c]>[WORD a]</><rdg>[items b]</></>
	>: [BEGOPT] [items a] "|BL:" [APPNUM c] "|" [items b] [ENDOPT] = <app type="BL"><lem resp=[APPNUM c]>[items a]</><rdg>[items b]</></>
	: [BEGOPT] [WORD a] "|editorial:" [WORDS e] "|" [WORD b] [ENDOPT] = <app type="editorial"><lem resp=[WORDS e]>[WORD a]</><rdg>[WORD b]</></>
	>: [BEGOPT] [items a] "|editorial:" [WORDS e] "|" [WORD b] [ENDOPT] = <app type="editorial"><lem resp=[WORDS e]>[items a]</><rdg>[WORD b]</></>
	>: [BEGOPT] [WORD a] "|editorial:" [WORDS e] "|" [items b] [ENDOPT] = <app type="editorial"><lem resp=[WORDS e]>[WORD a]</><rdg>[items b]</></>
	>: [BEGOPT] [items a] "|editorial:" [WORDS e] "|" [items b] [ENDOPT] = <app type="editorial"><lem resp=[WORDS e]>[items a]</><rdg>[items b]</></>
	: [BEGOPT] [WORD a] "|editorial:|" [WORD b] [ENDOPT] = <app type="editorial"><lem>[WORD a]</><rdg>[WORD b]</></>
	>: [BEGOPT] [items a] "|editorial:|" [WORD b] [ENDOPT] = <app type="editorial"><lem>[items a]</><rdg>[WORD b]</></>
	>: [BEGOPT] [WORD a] "|editorial:|" [items b] [ENDOPT] = <app type="editorial"><lem>[WORD a]</><rdg>[items b]</></>
	>: [BEGOPT] [items a] "|editorial:|" [items b] [ENDOPT] = <app type="editorial"><lem>[items a]</><rdg>[items b]</></>
	: [BEGOPT] [WORD a] "|alternative:|" [WORD b] [ENDOPT] = <app type="alternative"><lem>[WORD a]</><rdg>[WORD b]</></>
	>: [BEGOPT] [items a] "|alternative:|" [WORD b] [ENDOPT] = <app type="alternative"><lem>[items a]</><rdg>[WORD b]</></>
	>: [BEGOPT] [WORD a] "|alternative:|" [items b] [ENDOPT] = <app type="alternative"><lem>[WORD a]</><rdg>[items b]</></>
	>: [BEGOPT] [items a] "|alternative:|" [items b] [ENDOPT] = <app type="alternative"><lem>[items a]</><rdg>[items b]</></>

	//---glyph---
	//  '!!a', '!!a,b', '!!filler(a)' 
	: "!!" [WORDS a] " " = <g type=[WORDS a]></>
	: "!!" [WORD a] "," [WORD b] " " = <g type=[WORD a]>[WORD b]</>
	: "!!filler(" [WORD a] ")" " " = <g type="filler" rend=[WORD a]></>
	: "!!@" [WORD a] " " = <orig><g type=[WORD a]></></>
	
	//---hand_shift---
	//  $m# 
	: "$" [HANDSHIFT h] " " = <handShift new=[HANDSHIFT h]></>
	
	//---space_unknown---
	//  vac.? 
	: "vac.?" = <space extent="unknown" unit="character"></>
	
	//---note---
	//  /*abcdefg*/ 
	: "\/*" [WORDS a] [QUESTION b] "*\/" = <note lang="en">[WORDS a][QUESTION b]</>
	: "\/*" [QUESTION b] "*\/" = <note lang="en">[QUESTION b]</>
	
	//---foreign_lang---
	//  ~veni vedi vici~la 
	: "~" [WORDS a] "~" [WORD b] " " = <foreign lang=[WORD b]>[WORDS a]</>
	
	//---figure---
	//  fig.seal 
	: "fig." [WORD a] " " = <figure><figDesc>[WORD a]</></>
	
	//---del_rend---
	//  not brackets - already defined in inside-brackets
	: "〚-" [WORDS a] "〛" = <del rend="cross-strokes">[WORDS a]</>
	>: "〚-" [items a] "〛" = <del rend="cross-strokes">[items a]</>
	: "〚\/" [WORDS a] "〛" = <del rend="slashes">[WORDS a]</>
//this one has to be last so the first case will be caught before get here because '-' is a valid WORDS character
	>: "〚" [WORDS a] "〛" = <del rend="erasure">[WORDS a]</>
	
	
	>: [flat f] = [flat f]


	
flat 
	//---test_expand low cert---
	// (?)
	: "(" "?" ")" = <expan><ex cert="low"></></>
	
	//---test_expand low cert---
	// (abc?)
	: "(" [WORD w] "?" ")" = <expan><ex cert="low">[WORD w]</></>
	>: [WORD a] "(" [WORD b] "?" ")" = <expan>[WORD a]<ex cert="low">[WORD b]</></>
	
	//---test_expansion---
	// a(b)
	>: [WORD a] "(" [WORD b] ")" = <expan>[WORD a]<ex>[WORD b]</></>
	
	//---test_abbreviation_unknown_resolution---
	// ab( )
	: [WORD w] [ABBR] = <abbr> [WORD w] </>
	>: [items w] [ABBR] = <abbr>[items w]</>
	
	//---test_symbol_expansion---
	// (abc)
	: "(" [WORD a] ")" = <expan><ex>[WORD a]</></>
	
	//---test_counting_symbol_expansion---????????????????????????
	// (abc)
	: "(" [WORD a] __ [WORD b] ")" = <expan><ex>[WORD a] __ [WORD b]</></>
	
	//---test_vestige_lines---
	// vestig.#{n}lin
	: "vestig." [NUM v] "lin" = <gap reason="illegible" extent=[NUM v] unit="line" desc="vestiges"></>
	
	//---test_vestige_lines_ca---
	// vestig.ca.#{n}lin
	: "vestig.ca." [NUM v] "lin" = <gap reason="illegible" extent=[NUM v] unit="line" precision="circa" desc="vestiges"></>
	
	//---test_vestige_lines_unknown---
	// vestig.?lin
	: "vestig.?lin" = <gap reason="illegible" extent="unknown" unit="line"></>
	
	//---test_vestige_characters---
	// vestig
	: "vestig" = <gap reason="illegible" extent="unknown" unit="character" desc="vestiges"></>
	
	//---test_gap_breaks--- not sure where this came from - seems to not be needed and not defined otherwise
	// BREAK
	//: "BREAK" = <gap reason="lost" extent="unknown" unit="line"></>
	
	//---test_lost_lines---
	// lost.#{n}lin
	: "lost." [NUM v] "lin" = <gap reason="lost" extent=[NUM v] unit="line"></>
	
			//---test_lost_lines_unknown---
	// lost.#{n}lin
	: "lost." "?" "lin" = <gap reason="lost" extent="unknown" unit="line"></>
	
	//---test_quotation_marks---
	// " "
	>: "\"" [WORDS w] "\"" = <q>[WORDS w]</>
	
	//---test_omitted---
	//< >
	>: "<" [WORDS w] ">" = <supplied reason="omitted">[WORDS w]</>
	>: "<" [WORDS w] "?" ">" = <supplied reason="omitted" cert="low">[WORDS w]</>
	>: "<" [items i] ">" = <supplied reason="omitted">[items i]</>
	
	//---test_sic---
	//sic
	>: "{" [WORDS w] "}" = <sic>[WORDS w]</>	
	
	//---test_seg---
	//seg
	>: [BEGSEG] [items i] [ENDSEG] = <seg cert="low">[items i]</>	
	
	//---expand loop and items---
	: [WORDOPT a] "[" [WORDOPT b] "(" [WORD c] ")" [WORDOPT d] "]" [WORDOPT e] = <expan>[WORDOPT a]<supplied reason="lost">[WORDOPT b]<ex>[WORD c]</>[WORDOPT d]</>[WORDOPT e]</>
	: [expand e] = <expan>[expand e]</>
	>: [expand e] [WORD a] = <expan>[expand e] [WORD a]</>
	>: __ [expandi e] = __ <expan>[expandi e]</>
	>: __ [expandi e] [WORD a] = __ <expan>[expandi e] [WORD a]</>
	
			
	//---multiple tests see inside_brackets production---
	// [ ], [[ ]], [ca.?] etc...
	: "[" [inside_brackets i] "]" =  [inside_brackets i] 	
	
	//---test_illegible_gap_unknown---
	// .?
	: ".?" = <gap reason="illegible" extent="unknown" unit="character"></>
	
	//---test_illegible_gap_unknown_ca---
	// ca.?
	: [CAUNKNOWN] = <gap reason="illegible" extent="unknown" unit="character" precision="circa"></>
	
	>: [ANYLETTER a] = [ANYLETTER a]
		
	
	
	
expand 	: [WORD a] "(" [WORD b] ")" [expand more] = [WORD a]<ex>[WORD b]</>[expand more]
			>: [WORD a] "(" [WORD b] ")" = [WORD a]<ex>[WORD b]</>
			
expandi : [items a] "(" [WORD b] ")" [expandi more] = [items a]<ex>[WORD b]</>[expandi more]
			>: [items a] "(" [WORD b] ")" = [items a]<ex>[WORD b]</>
				
	
inside_brackets 
	
	//---test_lost_dot_gap---
	// .1, .2, .3 inside brackets
	: [DOT] [NUM n] = <gap reason="lost" extent=[NUM n] unit="character"></>
	
	//---test_lost_dot_max---
	// .#{n}-#{n}
	: [DOT] [NUM v] "-" [NUM w] = <gap reason="lost" extent=[NUM v] extentmax=[NUM w] unit="character"></>
			
	//---test_lost_gap_unknown---
	// [ .? ]  	
	>: ".?" = <gap reason="lost" extent="unknown" unit="character"></>
	
	//---test_lost_gap_unknown_ca---
	// [ ca.? ]  	
	>: [CAUNKNOWN] = <gap reason="lost" extent="unknown" unit="character" precision="circa"></>
	
	//---test_lost_uncertain---
	// [ abc? ] uncertain lost
	>:  [WORDS w] "\?" = <supplied reason="lost" cert="low">[WORDS w]</>
	
	//---test_lost--- - placed at the end so all other possibilities of inside brackets are checked before looping through 'items' production
	// [ ] lost
	>: [items is] = <supplied reason="lost">[items is]</>
	
			
